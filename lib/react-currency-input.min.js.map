{"version":3,"file":"react-currency-input.min.js","sources":["../src/mask.js","../src/object-assign-polyfill.js","../src/index.js"],"sourcesContent":["\nexport default function mask(value, precision = 2, decimalSeparator = '.', thousandSeparator = ',', allowNegative = false, prefix = '', suffix = ''){\n    // provide some default values and arg validation.\n    if (precision < 0) { precision = 0; } // precision cannot be negative\n    if (precision > 20) { precision = 20; } // precision cannot be greater than 20\n    \n    if (value === null || value===undefined) {\n          return {\n              value: 0,\n              maskedValue: ''\n          };\n     }\n  \n    value = String(value); //if the given value is a Number, let's convert into String to manipulate that\n\n    if (value.length == 0) {\n        return {\n            value: 0,\n            maskedValue: ''\n        };\n    }\n\n\n    // extract digits. if no digits, fill in a zero.\n    let digits = value.match(/\\d/g) || ['0'];\n    \n    let numberIsNegative = false;\n    if (allowNegative) {\n        let negativeSignCount = (value.match(/-/g) || []).length;\n        // number will be negative if we have an odd number of \"-\"\n        // ideally, we should only ever have 0, 1 or 2 (positive number, making a number negative\n        // and making a negative number positive, respectively)\n        numberIsNegative = negativeSignCount % 2 === 1;\n        \n        // if every digit in the array is '0', then the number should never be negative\n        let allDigitsAreZero = true;\n        for (let idx=0; idx < digits.length; idx += 1) {\n            if(digits[idx] !== '0') {\n                allDigitsAreZero = false;\n                break;\n            }\n        }\n        if (allDigitsAreZero) {\n            numberIsNegative = false;\n        }\n    }\n\n    // zero-pad a input\n    while (digits.length <= precision) { digits.unshift('0'); }\n\n    if (precision > 0) {\n        // add the decimal separator\n        digits.splice(digits.length - precision, 0, \".\");\n    }\n\n    // clean up extraneous digits like leading zeros.\n    digits = Number(digits.join('')).toFixed(precision).split('');\n    let raw = Number(digits.join(''));\n\n    let decimalpos = digits.length - precision - 1;  // -1 needed to position the decimal separator before the digits.\n    if (precision > 0) {\n        // set the final decimal separator\n        digits[decimalpos] = decimalSeparator;\n    } else {\n        // when precision is 0, there is no decimal separator.\n        decimalpos = digits.length;\n    }\n\n    // add in any thousand separators\n    for (let x=decimalpos - 3; x > 0; x = x - 3) {\n        digits.splice(x, 0, thousandSeparator);\n    }\n\n    // if we have a prefix or suffix, add them in.\n    if (prefix.length > 0) { digits.unshift(prefix); }\n    if (suffix.length > 0) { digits.push(suffix); }\n\n    // if the number is negative, insert a \"-\" to\n    // the front of the array and negate the raw value\n    if (allowNegative && numberIsNegative) {\n        digits.unshift('-');\n        raw = -raw;\n    }\n\n    return {\n        value: raw,\n        maskedValue: digits.join('').trim()\n    };\n}\n","Object.assign = Object.assign ||\n  function(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n","import \"./object-assign-polyfill\";\n\nimport PropTypes from \"prop-types\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport mask from \"./mask.js\";\n\n// IE* parseFloat polyfill\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat#Polyfill\nNumber.parseFloat = parseFloat;\n\nclass CurrencyInput extends Component {\n  constructor(props) {\n    super(props);\n    this.prepareProps = this.prepareProps.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleFocus = this.handleFocus.bind(this);\n    this.setSelectionRange = this.setSelectionRange.bind(this);\n    this.state = this.prepareProps(this.props);\n\n    this.inputSelectionStart = 1;\n    this.inputSelectionEnd = 1;\n  }\n\n  /**\n   * Exposes the current masked value.\n   *\n   * @returns {String}\n   */\n  getMaskedValue() {\n    return this.state.maskedValue;\n  }\n\n  /**\n   * General function used to cleanup and define the final props used for rendering\n   * @returns {{ maskedValue: {String}, value: {Number}, customProps: {Object} }}\n   */\n  prepareProps(props) {\n    let customProps = { ...props }; // babeljs converts to Object.assign, then polyfills.\n    delete customProps.onChange;\n    delete customProps.onChangeEvent;\n    delete customProps.value;\n    delete customProps.decimalSeparator;\n    delete customProps.thousandSeparator;\n    delete customProps.precision;\n    delete customProps.inputType;\n    delete customProps.allowNegative;\n    delete customProps.allowEmpty;\n    delete customProps.prefix;\n    delete customProps.suffix;\n    delete customProps.selectAllOnFocus;\n    delete customProps.autoFocus;\n\n    let initialValue = props.value;\n    if (initialValue === null) {\n      initialValue = props.allowEmpty ? null : \"\";\n    } else {\n      if (typeof initialValue == \"string\") {\n        // Some people, when confronted with a problem, think \"I know, I'll use regular expressions.\"\n        // Now they have two problems.\n\n        // Strip out thousand separators, prefix, and suffix, etc.\n        if (props.thousandSeparator === \".\") {\n          // special handle the . thousand separator\n          initialValue = initialValue.replace(/\\./g, \"\");\n        }\n\n        if (props.decimalSeparator != \".\") {\n          // fix the decimal separator\n          initialValue = initialValue.replace(\n            new RegExp(props.decimalSeparator, \"g\"),\n            \".\"\n          );\n        }\n\n        //Strip out anything that is not a digit, -, or decimal separator\n        initialValue = initialValue.replace(/[^0-9-.]/g, \"\");\n\n        // now we can parse.\n        initialValue = Number.parseFloat(initialValue);\n      }\n      initialValue = Number(initialValue).toLocaleString(undefined, {\n        style: \"decimal\",\n        minimumFractionDigits: props.precision,\n        maximumFractionDigits: props.precision\n      });\n    }\n\n    const { maskedValue, value } = mask(\n      initialValue,\n      props.precision,\n      props.decimalSeparator,\n      props.thousandSeparator,\n      props.allowNegative,\n      props.prefix,\n      props.suffix\n    );\n\n    return { maskedValue, value, customProps };\n  }\n\n  /**\n   * Component lifecycle function.\n   * Invoked when a component is receiving new props. This method is not called for the initial render.\n   *\n   * @param nextProps\n   * @see https://facebook.github.io/react/docs/component-specs.html#updating-componentwillreceiveprops\n   */\n  componentWillReceiveProps(nextProps) {\n    this.setState(this.prepareProps(nextProps));\n  }\n\n  /**\n   * Component lifecycle function.\n   * @returns {XML}\n   * @see https://facebook.github.io/react/docs/react-component.html#componentdidmount\n   */\n  componentDidMount() {\n    let node = ReactDOM.findDOMNode(this.theInput);\n    let selectionStart, selectionEnd;\n\n    if (this.props.autoFocus) {\n      this.theInput.focus();\n      selectionEnd = this.state.maskedValue.length - this.props.suffix.length;\n      selectionStart = selectionEnd;\n    } else {\n      selectionEnd = Math.min(\n        node.selectionEnd,\n        this.theInput.value.length - this.props.suffix.length\n      );\n      selectionStart = Math.min(node.selectionStart, selectionEnd);\n    }\n    this.setSelectionRange(node, selectionStart, selectionEnd);\n  }\n\n  /**\n   * Component lifecycle function\n   * @returns {XML}\n   * @see https://facebook.github.io/react/docs/react-component.html#componentwillupdate\n   */\n  componentWillUpdate() {\n    let node = ReactDOM.findDOMNode(this.theInput);\n    this.inputSelectionStart = node.selectionStart;\n    this.inputSelectionEnd = node.selectionEnd;\n  }\n\n  /**\n   * Component lifecycle function.\n   * @returns {XML}\n   * @see https://facebook.github.io/react/docs/react-component.html#componentdidupdate\n   */\n  componentDidUpdate(prevProps, prevState) {\n    const { decimalSeparator } = this.props;\n    let node = ReactDOM.findDOMNode(this.theInput);\n    let isNegative = (this.theInput.value.match(/-/g) || []).length % 2 === 1;\n    let minPos = this.props.prefix.length + (isNegative ? 1 : 0);\n    let selectionEnd = Math.max(\n      minPos,\n      Math.min(\n        this.inputSelectionEnd,\n        this.theInput.value.length - this.props.suffix.length\n      )\n    );\n    let selectionStart = Math.max(\n      minPos,\n      Math.min(this.inputSelectionEnd, selectionEnd)\n    );\n\n    let regexEscapeRegex = /[-[\\]{}()*+?.,\\\\^$|#\\s]/g;\n    let separatorsRegex = new RegExp(\n      decimalSeparator.replace(regexEscapeRegex, \"\\\\$&\") +\n        \"|\" +\n        this.props.thousandSeparator.replace(regexEscapeRegex, \"\\\\$&\"),\n      \"g\"\n    );\n    let currSeparatorCount = (\n      this.state.maskedValue.match(separatorsRegex) || []\n    ).length;\n    let prevSeparatorCount = (\n      prevState.maskedValue.match(separatorsRegex) || []\n    ).length;\n    let adjustment = Math.max(currSeparatorCount - prevSeparatorCount, 0);\n\n    selectionEnd = selectionEnd + adjustment;\n    selectionStart = selectionStart + adjustment;\n\n    const precision = Number(this.props.precision);\n\n    let baselength =\n      this.props.suffix.length +\n      this.props.prefix.length +\n      (precision > 0 ? decimalSeparator.length : 0) + // if precision is 0 there will be no decimal part\n      precision +\n      1; // This is to account for the default '0' value that comes before the decimal separator\n\n    if (this.state.maskedValue.length == baselength) {\n      // if we are already at base length, position the cursor at the end.\n      selectionEnd = this.theInput.value.length - this.props.suffix.length;\n      selectionStart = selectionEnd;\n    }\n    this.setSelectionRange(node, selectionStart, selectionEnd);\n    this.inputSelectionStart = selectionStart;\n    this.inputSelectionEnd = selectionEnd;\n  }\n\n  /**\n   * Set selection range only if input is in focused state\n   * @param node DOMElement\n   * @param start number\n   * @param end number\n   */\n  setSelectionRange(node, start, end) {\n    if (document.activeElement === node) {\n      node.setSelectionRange(start, end);\n    }\n  }\n\n  /**\n   * onChange Event Handler\n   * @param event\n   */\n  handleChange(event) {\n    event.preventDefault();\n    let { maskedValue, value } = mask(\n      event.target.value,\n      this.props.precision,\n      this.props.decimalSeparator,\n      this.props.thousandSeparator,\n      this.props.allowNegative,\n      this.props.prefix,\n      this.props.suffix\n    );\n\n    event.persist(); // fixes issue #23\n\n    this.setState({ maskedValue, value }, () => {\n      this.props.onChange(maskedValue, value, event);\n      this.props.onChangeEvent(\n        { ...event, target: { ...event.target, value } },\n        value,\n        maskedValue\n      );\n    });\n  }\n\n  /**\n   * onFocus Event Handler\n   * @param event\n   */\n  handleFocus(event) {\n    if (!this.theInput) return;\n\n    //Whenever we receive focus check to see if the position is before the suffix, if not, move it.\n    let selectionEnd = this.theInput.value.length - this.props.suffix.length;\n    let isNegative = (this.theInput.value.match(/-/g) || []).length % 2 === 1;\n    let selectionStart = this.props.prefix.length + (isNegative ? 1 : 0);\n    this.props.selectAllOnFocus &&\n      event.target.setSelectionRange(selectionStart, selectionEnd);\n    this.inputSelectionStart = selectionStart;\n    this.inputSelectionEnd = selectionEnd;\n  }\n\n  handleBlur(event) {\n    this.inputSelectionStart = 0;\n    this.inputSelectionEnd = 0;\n  }\n\n  /**\n   * Component lifecycle function.\n   * @returns {XML}\n   * @see https://facebook.github.io/react/docs/component-specs.html#render\n   */\n  render() {\n    return (\n      <input\n        ref={input => {\n          this.theInput = input;\n        }}\n        type={this.props.inputType}\n        value={this.state.maskedValue}\n        onChange={this.handleChange}\n        onFocus={this.handleFocus}\n        onMouseUp={this.handleFocus}\n        {...this.state.customProps}\n      />\n    );\n  }\n}\n\n/**\n * Prop validation.\n * @see https://facebook.github.io/react/docs/component-specs.html#proptypes\n */\n\nCurrencyInput.propTypes = {\n  onChange: PropTypes.func,\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  decimalSeparator: PropTypes.string,\n  thousandSeparator: PropTypes.string,\n  precision: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  inputType: PropTypes.string,\n  allowNegative: PropTypes.bool,\n  allowEmpty: PropTypes.bool,\n  prefix: PropTypes.string,\n  suffix: PropTypes.string,\n  selectAllOnFocus: PropTypes.bool\n};\n\nCurrencyInput.defaultProps = {\n  onChange: function(maskValue, value, event) {\n    /*no-op*/\n  },\n  onChangeEvent: function(event, maskValue, value) {\n    /*no-op*/\n  },\n  autoFocus: false,\n  value: \"0\",\n  decimalSeparator: \".\",\n  thousandSeparator: \",\",\n  precision: \"2\",\n  inputType: \"text\",\n  allowNegative: false,\n  prefix: \"\",\n  suffix: \"\",\n  selectAllOnFocus: false\n};\n\nexport default CurrencyInput;\n"],"names":["mask","value","precision","decimalSeparator","thousandSeparator","allowNegative","prefix","suffix","maskedValue","String","length","let","digits","match","numberIsNegative","allDigitsAreZero","idx","unshift","splice","Number","join","toFixed","split","raw","decimalpos","x","push","trim","Object","assign","target","i","arguments","source","key","prototype","hasOwnProperty","call","parseFloat","CurrencyInput","props","super","this","prepareProps","bind","handleChange","handleFocus","setSelectionRange","state","inputSelectionStart","inputSelectionEnd","getMaskedValue","customProps","onChange","onChangeEvent","inputType","allowEmpty","selectAllOnFocus","autoFocus","initialValue","replace","RegExp","toLocaleString","undefined","style","minimumFractionDigits","maximumFractionDigits","componentWillReceiveProps","nextProps","setState","componentDidMount","selectionStart","selectionEnd","node","ReactDOM","findDOMNode","theInput","focus","Math","min","componentWillUpdate","componentDidUpdate","prevProps","prevState","isNegative","minPos","max","regexEscapeRegex","separatorsRegex","currSeparatorCount","prevSeparatorCount","adjustment","const","baselength","start","end","document","activeElement","event","preventDefault","persist","handleBlur","render","React","ref","input","type","onFocus","onMouseUp","Component","propTypes","PropTypes","func","oneOfType","number","string","bool","defaultProps","maskValue"],"mappings":"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"}